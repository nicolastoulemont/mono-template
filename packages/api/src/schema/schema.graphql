### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account implements Node {
  createdAt: DateTime
  email: String

  """GUID for a resource"""
  id: Int
  updatedAt: DateTime
}

"""Return an account or account related errors"""
union AccountResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type ActiveUser implements Node & User {
  email: String

  """GUID for a resource"""
  id: Int
  name: String
  posts: [Post]
  status: UserStatus
}

type BannedUser implements Node & User {
  banReason: String

  """GUID for a resource"""
  id: Int
  name: String
  status: UserStatus
}

type BooleanResult {
  success: Boolean
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DeletedUser implements Node & User {
  deletedAt: DateTime

  """GUID for a resource"""
  id: Int
  name: String
  status: UserStatus
}

input EmailAndPasswordInput {
  email: String!
  password: String!
}

"""The differents error codes the api will return if needed"""
enum ErrorCode {
  BAD_REQUEST
  FORBIDDEN
  NOT_FOUND
  UNABLE_TO_PROCESS
  UNAUTHORIZED
}

"""The differents error message the api will return if needed"""
enum ErrorMessage {
  FORBIDDEN_YOU_DO_NOT_HAVE_ACCESS_TO_THIS_RESOURCE
  RESOURCE_NOT_FOUND
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_CLIENT_ERROR
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_SERVER_ERROR
  UNAUTHENTICATED_PLEASE_LOGIN
}

type InvalidArgument {
  key: String!
  message: String!
}

type InvalidArgumentsError {
  code: ErrorCode!
  invalidArguments: [InvalidArgument]!
  message: ErrorMessage!
}

type Mutation {
  changeUserStatus(id: Int!, status: UserStatus!): UserResult
  createAccount(account: EmailAndPasswordInput!): AccountResult
  createPost(authorEmail: String!, content: String, title: String!): PostResult
  createUser(email: String!, name: String!): UserResult
  signIn(account: EmailAndPasswordInput!): AccountResult
  signOut: BooleanResult
}

interface Node {
  """GUID for a resource"""
  id: Int
}

type NotFoundError {
  code: ErrorCode!
  message: ErrorMessage!
}

type Post implements Node {
  author: User
  content: String
  createdAt: DateTime

  """GUID for a resource"""
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

"""Return a post and post related errors"""
union PostResult = InvalidArgumentsError | Post | UserAuthenticationError

type Query {
  userById(id: ID!): UserResult
  users: [UserResult]
}

type UnableToProcessError {
  code: ErrorCode!
  message: ErrorMessage!
}

interface User {
  name: String
  status: UserStatus
}

type UserAuthenticationError {
  code: ErrorCode!
  message: ErrorMessage!
}

type UserForbiddenError {
  code: ErrorCode!
  message: ErrorMessage!
}

"""Return a user or user related errors"""
union UserResult = ActiveUser | BannedUser | DeletedUser | InvalidArgumentsError | NotFoundError | UserAuthenticationError

"""User account status"""
enum UserStatus {
  ACTIVE
  BANNED
  DELETED
}
