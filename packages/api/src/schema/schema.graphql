### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account implements Node {
  createdAt: DateTime
  email: EmailAddress

  """GUID for a resource"""
  id: ID
  updatedAt: DateTime
  verifiedAt: DateTime
}

"""The result of the accountById query"""
union AccountByIdResult = Account | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

"""Return an account or account related errors"""
union AccountResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""List of accounts"""
type AccountsList {
  accounts: [Account]
}

"""Represent the minimal fields required for any actors"""
interface Actor implements Node {
  accountId: ID!
  createdAt: DateTime!

  """GUID for a resource"""
  id: ID
  updatedAt: DateTime!
}

"""The result of the accounts query"""
union AllAccountsResult = AccountsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""The result of the allUsers query"""
union AllUsersResult = UnableToProcessError | UserAuthenticationError | UserForbiddenError | UsersList

type BooleanResult {
  success: Boolean
}

input CreateAccountInput {
  email: EmailAddress!
  password: String!
  username: String!
}

"""The result of the createAccount mutation"""
union CreateAccountResult = Account | InvalidArgumentsError | UnableToProcessError

"""The result of the currentAccount query"""
union CurrentAccountResult = Account | NotFoundError | UserAuthenticationError | UserForbiddenError

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The result of the deleteAccount mutation"""
union DeleteAccountResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input EmailAndPasswordInput {
  email: EmailAddress!
  password: String!
}

"""The differents error codes the api will return if needed"""
enum ErrorCode {
  BAD_REQUEST
  FORBIDDEN
  NOT_FOUND
  UNABLE_TO_PROCESS
  UNAUTHORIZED
}

"""The differents error message the api will return if needed"""
enum ErrorMessage {
  FORBIDDEN_YOU_DO_NOT_HAVE_ACCESS_TO_THIS_RESOURCE
  RESOURCE_NOT_FOUND
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_CLIENT_ERROR
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_SERVER_ERROR
  UNAUTHENTICATED_PLEASE_LOGIN
}

type InvalidArgument {
  key: String!
  message: String!
}

type InvalidArgumentsError {
  code: ErrorCode!
  invalidArguments: [InvalidArgument]!
  message: ErrorMessage!
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

"""The result of the lostPassword mutation"""
union LostPasswordResult = BooleanResult | NotFoundError

"""The result of the modifyEmail mutation"""
union ModifyEmailResult = Account | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError

"""The result of the modifyPassword mutation"""
union ModifyPasswordResult = Account | InvalidArgumentsError | NotFoundError | UserAuthenticationError

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountResult

  """Access restricted to logged in user"""
  deleteAccount(confirmPassword: String!): DeleteAccountResult
  lostPassword(email: String!): LostPasswordResult

  """Access restricted to logged in user"""
  modifyEmail(email: String!): ModifyEmailResult

  """Access restricted to logged in user"""
  modifyPassword(newPassword: String!, password: String!): ModifyPasswordResult
  resetPassword(input: ResetPasswordInput!): ResetPasswordResult
  sendVerificationEmail(email: String!): SendVerificationEmailResult
  signIn(input: EmailAndPasswordInput!): SignInResult

  """Access restricted to logged in user"""
  signOut: SignOutResult
  verifyUser(input: VerifyUserInput!): VerifyUserResult
}

interface Node {
  """GUID for a resource"""
  id: ID
}

type NotFoundError {
  code: ErrorCode!
  message: ErrorMessage!
}

type Query {
  """Access restricted to admin users"""
  accountById(id: ID!): AccountByIdResult

  """Access restricted to admin users"""
  allAccounts: AllAccountsResult

  """Access restricted to admin users"""
  allUsers: AllUsersResult

  """Access restricted to logged in user"""
  currentAccount: CurrentAccountResult

  """Access restricted to admin users"""
  userById(id: ID!): UserByIdResult
}

input ResetPasswordInput {
  newPassword: String!
  token: JWT!
}

"""The result of the resetPassword mutation"""
union ResetPasswordResult = BooleanResult | InvalidArgumentsError | UnableToProcessError

"""The result of the sendVerificationEmail mutation"""
union SendVerificationEmailResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError

"""The result of the signIn mutation"""
union SignInResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError

"""The result of the signOut mutation"""
union SignOutResult = BooleanResult | UserAuthenticationError

type UnableToProcessError {
  code: ErrorCode!
  message: ErrorMessage!
}

type User implements Actor & Node {
  accountId: ID!
  createdAt: DateTime!

  """GUID for a resource"""
  id: ID
  updatedAt: DateTime!
  username: String
}

type UserAuthenticationError {
  code: ErrorCode!
  message: ErrorMessage!
}

"""The result of the userById query"""
union UserByIdResult = InvalidArgumentsError | NotFoundError | User | UserAuthenticationError | UserForbiddenError

type UserForbiddenError {
  code: ErrorCode!
  message: ErrorMessage!
}

"""List of users"""
type UsersList {
  users: [User]
}

input VerifyUserInput {
  token: JWT!
}

"""The result of the verifyUser mutation"""
union VerifyUserResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError
