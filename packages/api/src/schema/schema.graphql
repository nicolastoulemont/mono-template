### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account implements Node {
  createdAt: DateTime
  email: EmailAddress

  """GUID for a resource"""
  id: Int
  updatedAt: DateTime
  verifiedAt: DateTime
}

"""Return an account or account related errors"""
union AccountResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type ActiveUser implements Node & User {
  email: String

  """GUID for a resource"""
  id: Int
  name: String
  posts: [Post]
  status: UserStatus
}

type BannedUser implements Node & User {
  banReason: String

  """GUID for a resource"""
  id: Int
  name: String
  status: UserStatus
}

type BooleanResult {
  success: Boolean
}

"""The result of the createAccount mutation"""
union CreateAccountResult = Account | InvalidArgumentsError | UnableToProcessError

"""The result of the currentAccount query"""
union CurrentAccountResult = Account | NotFoundError | UserAuthenticationError | UserForbiddenError

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The result of the deleteAccount mutation"""
union DeleteAccountResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError

type DeletedUser implements Node & User {
  deletedAt: DateTime

  """GUID for a resource"""
  id: Int
  name: String
  status: UserStatus
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input EmailAndPasswordInput {
  email: EmailAddress!
  password: String!
}

"""The differents error codes the api will return if needed"""
enum ErrorCode {
  BAD_REQUEST
  FORBIDDEN
  NOT_FOUND
  UNABLE_TO_PROCESS
  UNAUTHORIZED
}

"""The differents error message the api will return if needed"""
enum ErrorMessage {
  FORBIDDEN_YOU_DO_NOT_HAVE_ACCESS_TO_THIS_RESOURCE
  RESOURCE_NOT_FOUND
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_CLIENT_ERROR
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_SERVER_ERROR
  UNAUTHENTICATED_PLEASE_LOGIN
}

type InvalidArgument {
  key: String!
  message: String!
}

type InvalidArgumentsError {
  code: ErrorCode!
  invalidArguments: [InvalidArgument]!
  message: ErrorMessage!
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

"""The result of the lostPassword mutation"""
union LostPasswordResult = BooleanResult | NotFoundError

"""The result of the modifyEmail mutation"""
union ModifyEmailResult = Account | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError

"""The result of the modifyPassword mutation"""
union ModifyPasswordResult = Account | InvalidArgumentsError | NotFoundError | UserAuthenticationError

type Mutation {
  changeUserStatus(id: Int!, status: UserStatus!): UserResult
  createAccount(payload: EmailAndPasswordInput!): CreateAccountResult
  createPost(authorEmail: String!, content: String, title: String!): PostResult
  createUser(email: String!, name: String!): UserResult
  deleteAccount(confirmPassword: String!): DeleteAccountResult
  lostPassword(email: String!): LostPasswordResult
  modifyEmail(email: String!): ModifyEmailResult
  modifyPassword(newPassword: String!, password: String!): ModifyPasswordResult
  resetPassword(payload: ResetPasswordInput!): ResetPasswordResult
  sendVerificationEmail(email: String!): SendVerificationEmailResult
  signIn(payload: EmailAndPasswordInput!): SignInResult
  signOut: SignOutResult
  verifyUser(payload: VerifyUserInput!): VerifyUserResult
}

interface Node {
  """GUID for a resource"""
  id: Int
}

type NotFoundError {
  code: ErrorCode!
  message: ErrorMessage!
}

type Post implements Node {
  author: User
  content: String
  createdAt: DateTime

  """GUID for a resource"""
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

"""Return a post and post related errors"""
union PostResult = InvalidArgumentsError | Post | UserAuthenticationError

type Query {
  currentAccount: CurrentAccountResult
  userById(id: ID!): UserResult
  users: [UserResult]
}

input ResetPasswordInput {
  newPassword: String!
  token: JWT!
}

"""The result of the resetPassword mutation"""
union ResetPasswordResult = BooleanResult | InvalidArgumentsError | UnableToProcessError

"""The result of the sendVerificationEmail mutation"""
union SendVerificationEmailResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError

"""The result of the signIn mutation"""
union SignInResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError

"""The result of the signOut mutation"""
union SignOutResult = BooleanResult | UserAuthenticationError

type UnableToProcessError {
  code: ErrorCode!
  message: ErrorMessage!
}

interface User {
  name: String
  status: UserStatus
}

type UserAuthenticationError {
  code: ErrorCode!
  message: ErrorMessage!
}

type UserForbiddenError {
  code: ErrorCode!
  message: ErrorMessage!
}

"""Return a user or user related errors"""
union UserResult = ActiveUser | BannedUser | DeletedUser | InvalidArgumentsError | NotFoundError | UserAuthenticationError

"""User account status"""
enum UserStatus {
  ACTIVE
  BANNED
  DELETED
}

input VerifyUserInput {
  token: JWT!
}

"""The result of the verifyUser mutation"""
union VerifyUserResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError
