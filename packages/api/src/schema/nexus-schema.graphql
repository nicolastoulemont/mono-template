### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BooleanResponse {
  errors: [Error]
  success: Boolean
}

"""Either a success result or errors"""
union BooleanResult = InvalidArgumentsError | NotFoundError | Success | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Error {
  key: String
  message: String
}

"""The differents error codes the api will return if needed"""
enum ErrorCode {
  BAD_REQUEST
  FORBIDDEN
  NOT_FOUND
  UNABLE_TO_PROCESS
  UNAUTHORIZED
}

"""The differents error message the api will return if needed"""
enum ErrorMessage {
  FORBIDDEN_YOU_DO_NOT_HAVE_ACCESS_TO_THIS_RESOURCE
  RESOURCE_NOT_FOUND
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_CLIENT_ERROR
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_SERVER_ERROR
  UNAUTHENTICATED_PLEASE_LOGIN
}

type InvalidArgument {
  key: String
  message: String
}

type InvalidArgumentsError {
  code: ErrorCode
  invalidArguments: [InvalidArgument]
  message: ErrorMessage
}

type Mutation {
  deleteUser(confirmPassword: String!): BooleanResponse
  lostPassword(email: String!, lang: String!): BooleanResponse
  modifyEmail(email: String!): UserResponse
  modifyPassword(newPassword: String!, password: String!): UserResponse
  reSendVerificationEmail(email: String!, lang: String): BooleanResponse
  resetPassword(newPassword: String!, token: String!): BooleanResponse
  signIn(lang: String, user: Sign!): UserResult
  signOut: BooleanResult
  signUp(firstName: String!, lang: String!, originUrl: String, user: Sign!): UserResponse
  verifyUser(token: String!): BooleanResponse
}

interface Node {
  """GUID for a resource"""
  id: Int
}

type NotFoundError {
  code: ErrorCode
  message: ErrorMessage
}

type Query {
  currentUser: UserResult
  userById(id: ID!): UserResponse
  users: UsersResponse
}

input Sign {
  email: String!
  password: String!
}

type Success {
  success: Boolean
}

type UnableToProcessError {
  code: ErrorCode
  message: ErrorMessage
}

type User {
  access: String
  createdAt: DateTime
  email: String
  id: ID
  updatedAt: DateTime
  verified: Boolean
}

type UserAuthenticationError {
  code: ErrorCode
  message: ErrorMessage
}

type UserForbiddenError {
  code: ErrorCode
  message: ErrorMessage
}

type UserResponse {
  errors: [Error]
  user: User
}

"""A response resulting in a User or some errors"""
union UserResult = InvalidArgumentsError | NotFoundError | UnableToProcessError | User | UserAuthenticationError | UserForbiddenError

"""A list of Users"""
type Users {
  users: [User]
}

type UsersResponse {
  errors: [Error]
  users: [User]
}

"""A response resulting in possibly more than one User or some errors"""
union UsersResult = InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError | Users
